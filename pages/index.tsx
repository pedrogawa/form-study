import type { NextPage } from "next";
import { useEffect, useCallback } from "react";
import Head from "next/head";
import Image from "next/image";
import styles from "../styles/Home.module.css";

import FormInput from "../components/FormInput";
import FormTextArea from "../components/FormTextArea";

import { formSchema } from "../helpers/formDataObject";

import { SubmitHandler, useForm, FormProvider } from "react-hook-form";
import { yupResolver } from "@hookform/resolvers/yup";
import { TopicOption } from "../helpers/SelectData";
import FormSelect from "../components/FormSelect";
import FormSentModal from "../components/FormSentModal";

type FormData = {
  first_name: string;
  email: string;
  phone: string;
  message: string;
  topics: string;
};

const Home: NextPage = () => {
  const methods = useForm<FormData>({
    resolver: yupResolver(formSchema),
  });

  const { errors } = methods.formState;

  const handleForm: SubmitHandler<FormData> = useCallback(
    async (values) => {
      let successModal =
        document.querySelector<HTMLElement>(".modal-container");

      await new Promise((resolve) => setTimeout(resolve, 2000));
      if (successModal) {
        if (methods.formState.isSubmitSuccessful) {
          successModal.classList.add("show");
          methods.reset({ first_name: "", email: "", message: "", phone: "" });
        } else {
          console.log("Error");
        }
      }
    },
    [methods]
  );

  const test = useCallback(() => {
    let submitButton = document.querySelector<HTMLElement>("#submit-button");

    if (submitButton) {
      if (methods.formState.isSubmitting) {
        submitButton.style.opacity = "0.5";
      } else {
        submitButton.style.backgroundColor = "purple";
        submitButton.style.opacity = "1";
      }
    }
  }, [methods.formState.isSubmitting]);

  useEffect(() => {
    test();
    handleForm;
  }, [test, handleForm]);

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <FormProvider {...methods}>
        <form
          onSubmit={methods.handleSubmit(handleForm)}
          className={styles.formContainer}
        >
          <FormInput
            label="Your Name"
            error={errors.first_name}
            name="first_name"
          />
          <FormInput label="Your Email" error={errors.email} name="email" />
          <FormInput label="Phone" error={errors.phone} name="phone" />
          <FormSelect
            label="Select a topic"
            name="topics"
            error={errors.topics}
          />
          <FormTextArea
            label="Message (256 max)"
            error={errors.message}
            name="message"
          />
          <button
            className={styles.submitButton}
            id="submit-button"
            type="submit"
          >
            Save
          </button>
        </form>
      </FormProvider>
      <FormSentModal />
    </div>
  );
};

export default Home;
